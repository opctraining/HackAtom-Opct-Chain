// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: hackatomopctchain/exercise.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Exercise struct {
	Id          uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Creator     string `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
	Category    string `protobuf:"bytes,3,opt,name=category,proto3" json:"category,omitempty"`
	Score       int32  `protobuf:"varint,4,opt,name=score,proto3" json:"score,omitempty"`
	StartTime   int64  `protobuf:"varint,5,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime     int64  `protobuf:"varint,6,opt,name=endTime,proto3" json:"endTime,omitempty"`
	Challengeid uint64 `protobuf:"varint,7,opt,name=challengeid,proto3" json:"challengeid,omitempty"`
}

func (m *Exercise) Reset()         { *m = Exercise{} }
func (m *Exercise) String() string { return proto.CompactTextString(m) }
func (*Exercise) ProtoMessage()    {}
func (*Exercise) Descriptor() ([]byte, []int) {
	return fileDescriptor_36407f545f2d311c, []int{0}
}
func (m *Exercise) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Exercise) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Exercise.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Exercise) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Exercise.Merge(m, src)
}
func (m *Exercise) XXX_Size() int {
	return m.Size()
}
func (m *Exercise) XXX_DiscardUnknown() {
	xxx_messageInfo_Exercise.DiscardUnknown(m)
}

var xxx_messageInfo_Exercise proto.InternalMessageInfo

func (m *Exercise) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Exercise) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Exercise) GetCategory() string {
	if m != nil {
		return m.Category
	}
	return ""
}

func (m *Exercise) GetScore() int32 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *Exercise) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *Exercise) GetEndTime() int64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

func (m *Exercise) GetChallengeid() uint64 {
	if m != nil {
		return m.Challengeid
	}
	return 0
}

func init() {
	proto.RegisterType((*Exercise)(nil), "hackatomopctchain.hackatomopctchain.Exercise")
}

func init() { proto.RegisterFile("hackatomopctchain/exercise.proto", fileDescriptor_36407f545f2d311c) }

var fileDescriptor_36407f545f2d311c = []byte{
	// 251 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x90, 0xbf, 0x4e, 0xc3, 0x30,
	0x10, 0xc6, 0x73, 0x69, 0xd3, 0x3f, 0x46, 0x62, 0xb0, 0x18, 0x2c, 0x84, 0x2c, 0x0b, 0x96, 0x2c,
	0x69, 0x07, 0xde, 0x00, 0x09, 0xb1, 0x47, 0x4c, 0x6c, 0xc6, 0x39, 0x35, 0x16, 0x6d, 0x1c, 0x39,
	0x37, 0xb4, 0x6f, 0xc1, 0x23, 0x31, 0x32, 0x76, 0x64, 0x44, 0xc9, 0x8b, 0xa0, 0x3a, 0x04, 0x2a,
	0x65, 0xfc, 0x7d, 0xdf, 0x9d, 0xee, 0xbe, 0x8f, 0xa9, 0x52, 0x9b, 0x37, 0x4d, 0x6e, 0xe7, 0x6a,
	0x43, 0xa6, 0xd4, 0xb6, 0x5a, 0xe3, 0x1e, 0xbd, 0xb1, 0x0d, 0xae, 0x6a, 0xef, 0xc8, 0xf1, 0xbb,
	0xd1, 0xc4, 0x6a, 0xa4, 0xdc, 0x7e, 0x00, 0x5b, 0x3c, 0xfe, 0xee, 0xf1, 0x4b, 0x16, 0xdb, 0x42,
	0x80, 0x82, 0x74, 0x9a, 0xc7, 0xb6, 0xe0, 0x82, 0xcd, 0x8d, 0x47, 0x4d, 0xce, 0x8b, 0x58, 0x41,
	0xba, 0xcc, 0x07, 0xe4, 0xd7, 0x6c, 0x61, 0x34, 0xe1, 0xc6, 0xf9, 0x83, 0x98, 0x04, 0xeb, 0x8f,
	0xf9, 0x15, 0x4b, 0x1a, 0xe3, 0x3c, 0x8a, 0xa9, 0x82, 0x34, 0xc9, 0x7b, 0xe0, 0x37, 0x6c, 0xd9,
	0x90, 0xf6, 0xf4, 0x6c, 0x77, 0x28, 0x12, 0x05, 0xe9, 0x24, 0xff, 0x17, 0x4e, 0x97, 0xb0, 0x2a,
	0x82, 0x37, 0x0b, 0xde, 0x80, 0x5c, 0xb1, 0x0b, 0x53, 0xea, 0xed, 0x16, 0xab, 0x0d, 0xda, 0x42,
	0xcc, 0xc3, 0x73, 0xe7, 0xd2, 0xc3, 0xd3, 0x67, 0x2b, 0xe1, 0xd8, 0x4a, 0xf8, 0x6e, 0x25, 0xbc,
	0x77, 0x32, 0x3a, 0x76, 0x32, 0xfa, 0xea, 0x64, 0xf4, 0x92, 0x0d, 0x79, 0xb3, 0x53, 0xe0, 0xac,
	0x6f, 0x69, 0xbf, 0x1e, 0x37, 0x47, 0x87, 0x1a, 0x9b, 0xd7, 0x59, 0xe8, 0xed, 0xfe, 0x27, 0x00,
	0x00, 0xff, 0xff, 0xa4, 0x60, 0xa5, 0x82, 0x5b, 0x01, 0x00, 0x00,
}

func (m *Exercise) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Exercise) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Exercise) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Challengeid != 0 {
		i = encodeVarintExercise(dAtA, i, uint64(m.Challengeid))
		i--
		dAtA[i] = 0x38
	}
	if m.EndTime != 0 {
		i = encodeVarintExercise(dAtA, i, uint64(m.EndTime))
		i--
		dAtA[i] = 0x30
	}
	if m.StartTime != 0 {
		i = encodeVarintExercise(dAtA, i, uint64(m.StartTime))
		i--
		dAtA[i] = 0x28
	}
	if m.Score != 0 {
		i = encodeVarintExercise(dAtA, i, uint64(m.Score))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Category) > 0 {
		i -= len(m.Category)
		copy(dAtA[i:], m.Category)
		i = encodeVarintExercise(dAtA, i, uint64(len(m.Category)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintExercise(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintExercise(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintExercise(dAtA []byte, offset int, v uint64) int {
	offset -= sovExercise(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Exercise) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovExercise(uint64(m.Id))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovExercise(uint64(l))
	}
	l = len(m.Category)
	if l > 0 {
		n += 1 + l + sovExercise(uint64(l))
	}
	if m.Score != 0 {
		n += 1 + sovExercise(uint64(m.Score))
	}
	if m.StartTime != 0 {
		n += 1 + sovExercise(uint64(m.StartTime))
	}
	if m.EndTime != 0 {
		n += 1 + sovExercise(uint64(m.EndTime))
	}
	if m.Challengeid != 0 {
		n += 1 + sovExercise(uint64(m.Challengeid))
	}
	return n
}

func sovExercise(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozExercise(x uint64) (n int) {
	return sovExercise(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Exercise) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExercise
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Exercise: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Exercise: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExercise
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExercise
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExercise
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExercise
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Category", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExercise
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExercise
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExercise
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Category = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExercise
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExercise
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExercise
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Challengeid", wireType)
			}
			m.Challengeid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExercise
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Challengeid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipExercise(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExercise
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipExercise(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowExercise
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExercise
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExercise
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthExercise
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupExercise
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthExercise
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthExercise        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowExercise          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupExercise = fmt.Errorf("proto: unexpected end of group")
)
