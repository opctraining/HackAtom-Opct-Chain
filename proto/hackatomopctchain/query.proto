syntax = "proto3";
package hackatomopctchain.hackatomopctchain;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "hackatomopctchain/params.proto";
import "hackatomopctchain/exercise.proto";
// this line is used by starport scaffolding # 1

option go_package = "hackatom-opct-chain/x/hackatomopctchain/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/hackatom-opct-chain/hackatomopctchain/params";
  }

  // Queries a list of Exercises items.
  rpc Exercises(QueryExercisesRequest) returns (QueryExercisesResponse) {
    option (google.api.http).get = "/hackatom-opct-chain/hackatomopctchain/exercises";
  }

  // Queries a list of Challenges items.
	rpc Challenges(QueryChallengesRequest) returns (QueryChallengesResponse) {
		option (google.api.http).get = "/hackatom-opct-chain/hackatomopctchain/challenges/{date}";
	}

// this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryExercisesRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryExercisesResponse {
  repeated Exercise Exercise = 1;

  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryChallengesRequest {
  string date = 1;
}

message QueryChallengesResponse {
  string category = 1;
  string date = 2;
  string uri = 3;
}

// this line is used by starport scaffolding # 3
